#!/usr/bin/env python3
"""
Test Multi-Coin Live Trading
===========================

This script tests the multi-coin live trading implementation to ensure:
1. All coins are cached and updated
2. All coins are being traded
3. Multi-signal selection works across all coins
"""

import os
import sys
import yaml
import time
from datetime import datetime

def test_multi_coin_live_trading():
    """Test the multi-coin live trading implementation."""
    print("üß™ Testing Multi-Coin Live Trading")
    print("="*50)
    
    # Load configuration
    with open('config_live.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # Import live trading engine
    from live_trading_engine import LiveTradingEngine
    
    try:
        # Initialize trading engine
        print("üöÄ Initializing multi-coin live trading engine...")
        engine = LiveTradingEngine(config)
        
        # Check data manager type
        print(f"\nüìä Data Manager Type: {type(engine.data_manager).__name__}")
        
        # Check available coins
        available_coins = engine.data_manager.get_available_coins()
        print(f"üìà Available Coins: {available_coins}")
        
        # Check models loaded
        print(f"ü§ñ Models Loaded: {list(engine.models.keys())}")
        
        # Check cache status for all coins
        print(f"\nüìä Cache Status for All Coins:")
        cache_status = engine.data_manager.get_cache_status()
        for coin, timeframes in cache_status.items():
            total_candles = sum(info['count'] for info in timeframes.values())
            print(f"  {coin}: {total_candles} total candles")
            for tf, info in timeframes.items():
                print(f"    {tf}: {info['count']} candles")
        
        # Test signal generation for all coins
        print(f"\nüîÑ Testing Signal Generation for All Coins:")
        signals = {}
        
        for coin in available_coins:
            try:
                prob, should_trade = engine.get_prediction(coin)
                signals[coin] = {
                    'probability': prob,
                    'should_trade': should_trade
                }
                status = "‚úÖ BUY SIGNAL" if should_trade else "‚ùå NO SIGNAL"
                print(f"  {coin}: {prob:.3f} {status}")
            except Exception as e:
                print(f"  {coin}: ERROR - {e}")
                signals[coin] = {'probability': 0.0, 'should_trade': False}
        
        # Test multi-signal selection
        print(f"\nüéØ Testing Multi-Signal Selection:")
        buy_signals = []
        for coin, signal in signals.items():
            if signal['should_trade']:
                buy_signals.append({
                    'coin': coin,
                    'probability': signal['probability'],
                    'timestamp': datetime.now()
                })
        
        if buy_signals:
            # Sort by probability (highest first)
            buy_signals.sort(key=lambda x: x['probability'], reverse=True)
            
            print(f"  Found {len(buy_signals)} buy signals:")
            for i, signal in enumerate(buy_signals):
                status = "‚úÖ SELECTED" if i == 0 else "‚ùå SKIPPED"
                print(f"    {i+1}. {signal['coin']}: {signal['probability']:.3f} {status}")
            
            # Test trade execution for best signal
            best_signal = buy_signals[0]
            coin = best_signal['coin']
            prob = best_signal['probability']
            
            print(f"\nüîÑ Testing Trade Execution for Best Signal:")
            print(f"  Selected: {coin} with probability {prob:.3f}")
            
            # Get current price
            current_price = engine.get_current_price(coin)
            print(f"  Current Price: ${current_price:.2f}")
            
            # Test buy execution
            success, coin_amount, buy_fee = engine.execute_trade(coin, 'buy', current_price)
            if success:
                print(f"  ‚úÖ Buy successful: {coin_amount:.6f} {coin} (fee: ${buy_fee:.2f})")
                
                # Simulate position
                if engine.use_full_bankroll:
                    usdc_spent = engine.bankroll
                    engine.bankroll = 0
                else:
                    usdc_spent = engine.position_size
                    engine.bankroll -= engine.position_size
                
                engine.current_positions[coin] = {
                    'entry_time': datetime.now(),
                    'entry_price': current_price,
                    'coin_amount': coin_amount,
                    'usdc_spent': usdc_spent,
                    'buy_fee': buy_fee,
                    'signal_probability': prob,
                    'competing_signals': len(buy_signals) - 1
                }
                
                print(f"  Position: {coin_amount:.6f} {coin}")
                print(f"  Bankroll: ${engine.bankroll:.2f}")
                print(f"  Competing Signals: {len(buy_signals) - 1}")
        else:
            print("  No buy signals found")
        
        # Check final status
        status = engine.get_status()
        print(f"\nüìä Final Status:")
        print(f"  Bankroll: ${status['bankroll']:.2f}")
        print(f"  Positions: {status['positions']}")
        print(f"  Models: {status['models_loaded']}")
        print(f"  Current Positions: {list(status['current_positions'].keys())}")
        
        print(f"\n‚úÖ Multi-coin live trading test completed successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing multi-coin live trading: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_data_consistency():
    """Test that data is consistent across all coins."""
    print(f"\nüß™ Testing Data Consistency Across All Coins")
    print("="*50)
    
    # Load configuration
    with open('config_live.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    from multi_coin_data_manager import LiveMultiCoinDataManager
    data_manager = LiveMultiCoinDataManager(config)
    
    # Get cache status
    cache_status = data_manager.get_cache_status()
    
    print("üìä Data Consistency Check:")
    for coin, timeframes in cache_status.items():
        print(f"\n{coin}:")
        for tf, info in timeframes.items():
            if info['latest_time']:
                print(f"  {tf}: {info['count']} candles, latest: {info['latest_time']}")
            else:
                print(f"  {tf}: {info['count']} candles, latest: None")
    
    # Check if all coins have recent data
    print(f"\nüîç Recent Data Check:")
    for coin, timeframes in cache_status.items():
        has_recent_data = True
        for tf, info in timeframes.items():
            if info['count'] < 100:
                has_recent_data = False
                break
        
        status = "‚úÖ READY" if has_recent_data else "‚ùå INSUFFICIENT DATA"
        print(f"  {coin}: {status}")

def main():
    """Main test function."""
    print("üß™ Multi-Coin Live Trading Test Suite")
    print("="*60)
    print(f"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test multi-coin live trading
    multi_coin_ok = test_multi_coin_live_trading()
    
    # Test data consistency
    test_data_consistency()
    
    # Summary
    print("\n" + "="*60)
    print("TEST SUMMARY")
    print("="*60)
    print(f"Multi-Coin Live Trading: {'‚úÖ PASS' if multi_coin_ok else '‚ùå FAIL'}")
    
    if multi_coin_ok:
        print("\nüéâ Multi-coin live trading tests passed!")
        print("The system now:")
        print("  ‚úÖ Uses multi-coin data manager")
        print("  ‚úÖ Caches data for all coins (ADA, BTC, DOGE, ETH, XRP)")
        print("  ‚úÖ Updates all coins every hour")
        print("  ‚úÖ Generates signals for all coins")
        print("  ‚úÖ Selects best signal across all coins")
        print("  ‚úÖ Trades any of the 5 coins")
    else:
        print("\n‚ö†Ô∏è  Multi-coin live trading tests failed. Please check the errors above.")
    
    print(f"Test completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
